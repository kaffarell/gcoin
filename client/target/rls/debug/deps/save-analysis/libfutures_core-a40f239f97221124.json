{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12","program":"C:\\Users\\gabri\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","futures_core","--edition=2018","C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=a40f239f97221124","-C","extra-filename=-a40f239f97221124","--out-dir","c:\\Users\\gabri\\Desktop\\gcoin\\client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\gabri\\Desktop\\gcoin\\client\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\gabri\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\gabri\\Desktop\\gcoin\\client\\target\\rls\\debug\\deps\\libfutures_core-a40f239f97221124.rmeta"},"prelude":{"crate_id":{"name":"futures_core","disambiguator":[1671919372578227713,2896883413225368489]},"crate_root":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src","external_crates":[{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7607668859873757532,1781785219377684392]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","num":2,"id":{"name":"core","disambiguator":[13611023294341355437,10043691270023661894]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[101447838822452173,8618322888261503379]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13475896778791491548,12248248351844131012]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4016777027723060150,6575819384461205726]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2651865965395105447,1277636433429132291]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6625204696738865430,3777009149181587391]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2466389407038385562,16922006968362962921]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7691805749014262489,8411562063720114408]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10977525908131958733,15669095950081001892]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14600121526287085947,8078689161172856885]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[15875267039736385556,9614836444850963760]}}],"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":0,"byte_end":1101,"line_start":1,"line_end":32,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":9666},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1218,"byte_end":1224,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":2,"index":9666},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":866,"byte_end":872,"line_start":20,"line_end":20,"column_start":39,"column_end":45},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":874,"byte_end":885,"line_start":20,"line_end":20,"column_start":47,"column_end":58},"alias_span":null,"name":"FusedFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":887,"byte_end":896,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"TryFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":954,"byte_end":960,"line_start":23,"line_end":23,"column_start":39,"column_end":45},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":962,"byte_end":973,"line_start":23,"line_end":23,"column_start":47,"column_end":58},"alias_span":null,"name":"FusedStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":975,"byte_end":984,"line_start":23,"line_end":23,"column_start":60,"column_end":69},"alias_span":null,"name":"TryStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\mod.rs","byte_start":13162,"byte_end":13173,"line_start":4,"line_end":4,"column_start":29,"column_end":40},"alias_span":null,"name":"AtomicWaker","value":"","parent":{"krate":0,"index":132}},{"kind":"Use","ref_id":{"krate":2,"index":9841},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12551,"byte_end":12558,"line_start":9,"line_end":9,"column_start":22,"column_end":29},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":37287},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12560,"byte_end":12564,"line_start":9,"line_end":9,"column_start":31,"column_end":35},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":9851},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12566,"byte_end":12571,"line_start":9,"line_end":9,"column_start":37,"column_end":42},"alias_span":null,"name":"Waker","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":37323},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12573,"byte_end":12581,"line_start":9,"line_end":9,"column_start":44,"column_end":52},"alias_span":null,"name":"RawWaker","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":37332},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12583,"byte_end":12597,"line_start":9,"line_end":9,"column_start":54,"column_end":68},"alias_span":null,"name":"RawWakerVTable","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":37287},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":1094,"byte_end":1098,"line_start":31,"line_end":31,"column_start":25,"column_end":29},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":169}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":0,"byte_end":1101,"line_start":1,"line_end":32,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":169}],"decl_id":null,"docs":" Core traits and types for asynchronous operations in Rust.\n","sig":null,"attributes":[{"value":"/ Core traits and types for asynchronous operations in Rust.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":189,"byte_end":277,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":445,"byte_end":466,"line_start":10,"line_end":10,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::future","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":43}],"decl_id":null,"docs":" Futures.\n","sig":null,"attributes":[{"value":"/ Futures.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1103,"byte_end":1115,"line_start":1,"line_end":1,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1402,"byte_end":1411,"line_start":12,"line_end":12,"column_start":10,"column_end":19},"name":"BoxFuture","qualname":"::future::BoxFuture","value":"Pin<alloc::boxed::Box<Future<Output = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Future`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Future`] for use in cases where you can't","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1227,"byte_end":1301,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1302,"byte_end":1366,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1367,"byte_end":1392,"line_start":11,"line_end":11,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1570,"byte_end":1584,"line_start":16,"line_end":16,"column_start":10,"column_end":24},"name":"LocalBoxFuture","qualname":"::future::LocalBoxFuture","value":"Pin<alloc::boxed::Box<Future<Output = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxFuture`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxFuture`, but without the `Send` requirement.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1482,"byte_end":1534,"line_start":14,"line_end":14,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1535,"byte_end":1560,"line_start":15,"line_end":15,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2111,"byte_end":2122,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"FusedFuture","qualname":"::future::FusedFuture","value":"FusedFuture: Future","parent":null,"children":[{"krate":0,"index":18}],"decl_id":null,"docs":" A future which tracks whether or not the underlying future\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A future which tracks whether or not the underlying future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1648,"byte_end":1710,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1711,"byte_end":1742,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1743,"byte_end":1746,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1747,"byte_end":1825,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll` (or `try_poll`) returned","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1826,"byte_end":1894,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ `Poll::Ready`. However, `is_terminated` may also return `true` if a future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1895,"byte_end":1973,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ has become inactive and can no longer make progress and should be ignored","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":1974,"byte_end":2051,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ or dropped rather than being `poll`ed again.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2052,"byte_end":2100,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2216,"byte_end":2229,"line_start":28,"line_end":28,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::future::FusedFuture::is_terminated","value":"pub fn is_terminated(&Self) -> bool","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Returns `true` if the underlying future should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the underlying future should no longer be polled.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2137,"byte_end":2208,"line_start":27,"line_end":27,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2671,"byte_end":2677,"line_start":50,"line_end":50,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::future::private_try_future::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2901,"byte_end":2910,"line_start":57,"line_end":57,"column_start":11,"column_end":20},"name":"TryFuture","qualname":"::future::TryFuture","value":"TryFuture: Future + private_try_future::Sealed","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" A convenience for futures that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for futures that return `Result` values that includes","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2767,"byte_end":2838,"line_start":55,"line_end":55,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2839,"byte_end":2890,"line_start":56,"line_end":56,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3020,"byte_end":3022,"line_start":59,"line_end":59,"column_start":10,"column_end":12},"name":"Ok","qualname":"::future::TryFuture::Ok","value":"type Ok;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2954,"byte_end":3010,"line_start":58,"line_end":58,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3086,"byte_end":3091,"line_start":62,"line_end":62,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::TryFuture::Error","value":"type Error;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3029,"byte_end":3076,"line_start":61,"line_end":61,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3341,"byte_end":3349,"line_start":69,"line_end":69,"column_start":8,"column_end":16},"name":"try_poll","qualname":"::future::TryFuture::try_poll","value":"pub fn try_poll(Pin<&mut Self>, &mut Context)\n-> Poll<Result<Self::Ok, Self::Error>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Poll this `TryFuture` as if it were a `Future`.","sig":null,"attributes":[{"value":"/ Poll this `TryFuture` as if it were a `Future`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3098,"byte_end":3149,"line_start":64,"line_end":64,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3154,"byte_end":3157,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3162,"byte_end":3238,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Future` trait; in the future it won't be","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3243,"byte_end":3317,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3322,"byte_end":3333,"line_start":68,"line_end":68,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":108}],"decl_id":null,"docs":" Asynchronous streams.\n","sig":null,"attributes":[{"value":"/ Asynchronous streams.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4198,"byte_end":4223,"line_start":1,"line_end":1,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4479,"byte_end":4488,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"BoxStream","qualname":"::stream::BoxStream","value":"Pin<alloc::boxed::Box<Stream<Item = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Stream`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Stream`] for use in cases where you can't","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4304,"byte_end":4378,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4379,"byte_end":4443,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4444,"byte_end":4469,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4645,"byte_end":4659,"line_start":14,"line_end":14,"column_start":10,"column_end":24},"name":"LocalBoxStream","qualname":"::stream::LocalBoxStream","value":"Pin<alloc::boxed::Box<Stream<Item = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxStream`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxStream`, but without the `Send` requirement.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4557,"byte_end":4609,"line_start":12,"line_end":12,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4610,"byte_end":4635,"line_start":13,"line_end":13,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5266,"byte_end":5272,"line_start":27,"line_end":27,"column_start":11,"column_end":17},"name":"Stream","qualname":"::stream::Stream","value":"Stream","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" A stream of values produced asynchronously.","sig":null,"attributes":[{"value":"/ A stream of values produced asynchronously.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4721,"byte_end":4768,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4769,"byte_end":4772,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If `Future<Output = T>` is an asynchronous version of `T`, then `Stream<Item","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4773,"byte_end":4853,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ = T>` is an asynchronous version of `Iterator<Item = T>`. A stream","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4854,"byte_end":4924,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ represents a sequence of value-producing events that occur asynchronously to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":4925,"byte_end":5005,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the caller.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5006,"byte_end":5021,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5022,"byte_end":5025,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The trait is modeled after `Future`, but allows `poll_next` to be called","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5026,"byte_end":5102,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ even after a value has been produced, yielding `None` once the stream has","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5103,"byte_end":5180,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ been fully exhausted.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5181,"byte_end":5206,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5207,"byte_end":5255,"line_start":26,"line_end":26,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5322,"byte_end":5326,"line_start":29,"line_end":29,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::Stream::Item","value":"type Item;","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Values yielded by the stream.\n","sig":null,"attributes":[{"value":"/ Values yielded by the stream.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5279,"byte_end":5312,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7042,"byte_end":7051,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"poll_next","qualname":"::stream::Stream::poll_next","value":"pub fn poll_next(Pin<&mut Self>, &mut Context) -> Poll<Option<Self::Item>>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Attempt to pull out the next value of this stream, registering the\n current task for wakeup if the value is not yet available, and returning\n `None` if the stream is exhausted.","sig":null,"attributes":[{"value":"/ Attempt to pull out the next value of this stream, registering the","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5333,"byte_end":5403,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ current task for wakeup if the value is not yet available, and returning","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5408,"byte_end":5484,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ `None` if the stream is exhausted.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5489,"byte_end":5527,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5532,"byte_end":5535,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5540,"byte_end":5558,"line_start":35,"line_end":35,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5563,"byte_end":5566,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ There are several possible return values, each indicating a distinct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5571,"byte_end":5643,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ stream state:","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5648,"byte_end":5665,"line_start":38,"line_end":38,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5670,"byte_end":5673,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Pending` means that this stream's next value is not ready","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5678,"byte_end":5748,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ yet. Implementations will ensure that the current task will be notified","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5753,"byte_end":5828,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ when the next value may be ready.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5833,"byte_end":5870,"line_start":42,"line_end":42,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5875,"byte_end":5878,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Some(val))` means that the stream has successfully","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5883,"byte_end":5952,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ produced a value, `val`, and may produce further values on subsequent","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":5957,"byte_end":6030,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ `poll_next` calls.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6035,"byte_end":6057,"line_start":46,"line_end":46,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6062,"byte_end":6065,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(None)` means that the stream has terminated, and","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6070,"byte_end":6137,"line_start":48,"line_end":48,"column_start":5,"column_end":72}},{"value":"/ `poll_next` should not be invoked again.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6142,"byte_end":6186,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6191,"byte_end":6194,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6199,"byte_end":6211,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6216,"byte_end":6219,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Once a stream has finished (returned `Ready(None)` from `poll_next`), calling its","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6224,"byte_end":6309,"line_start":53,"line_end":53,"column_start":5,"column_end":90}},{"value":"/ `poll_next` method again may panic, block forever, or cause other kinds of","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6314,"byte_end":6392,"line_start":54,"line_end":54,"column_start":5,"column_end":83}},{"value":"/ problems; the `Stream` trait places no requirements on the effects of","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6397,"byte_end":6470,"line_start":55,"line_end":55,"column_start":5,"column_end":78}},{"value":"/ such a call. However, as the `poll_next` method is not marked `unsafe`,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6475,"byte_end":6550,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ Rust's usual rules apply: calls must never cause undefined behavior","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6555,"byte_end":6626,"line_start":57,"line_end":57,"column_start":5,"column_end":76}},{"value":"/ (memory corruption, incorrect use of `unsafe` functions, or the like),","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6631,"byte_end":6705,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"/ regardless of the stream's state.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6710,"byte_end":6747,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6752,"byte_end":6755,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ If this is difficult to guard against then the [`fuse`] adapter can be used","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6760,"byte_end":6839,"line_start":61,"line_end":61,"column_start":5,"column_end":84}},{"value":"/ to ensure that `poll_next` always returns `Ready(None)` in subsequent","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6844,"byte_end":6917,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ calls.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6922,"byte_end":6932,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6937,"byte_end":6940,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ [`fuse`]: https://docs.rs/futures/0.3/futures/stream/trait.StreamExt.html#method.fuse","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":6945,"byte_end":7034,"line_start":65,"line_end":65,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8459,"byte_end":8468,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::stream::Stream::size_hint","value":"pub fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the bounds on the remaining length of the stream.","sig":null,"attributes":[{"value":"/ Returns the bounds on the remaining length of the stream.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7153,"byte_end":7214,"line_start":71,"line_end":71,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7219,"byte_end":7222,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Specifically, `size_hint()` returns a tuple where the first element","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7227,"byte_end":7298,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ is the lower bound, and the second element is the upper bound.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7303,"byte_end":7369,"line_start":74,"line_end":74,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7374,"byte_end":7377,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The second half of the tuple that is returned is an [`Option`]`<`[`usize`]`>`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7382,"byte_end":7464,"line_start":76,"line_end":76,"column_start":5,"column_end":87}},{"value":"/ A [`None`] here means that either there is no known upper bound, or the","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7469,"byte_end":7544,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/ upper bound is larger than [`usize`].","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7549,"byte_end":7590,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7595,"byte_end":7598,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7603,"byte_end":7629,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7634,"byte_end":7637,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ It is not enforced that a stream implementation yields the declared","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7642,"byte_end":7713,"line_start":82,"line_end":82,"column_start":5,"column_end":76}},{"value":"/ number of elements. A buggy stream may yield less than the lower bound","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7718,"byte_end":7792,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ or more than the upper bound of elements.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7797,"byte_end":7842,"line_start":84,"line_end":84,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7847,"byte_end":7850,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ `size_hint()` is primarily intended to be used for optimizations such as","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7855,"byte_end":7931,"line_start":86,"line_end":86,"column_start":5,"column_end":81}},{"value":"/ reserving space for the elements of the stream, but must not be","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":7936,"byte_end":8003,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ trusted to e.g., omit bounds checks in unsafe code. An incorrect","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8008,"byte_end":8076,"line_start":88,"line_end":88,"column_start":5,"column_end":73}},{"value":"/ implementation of `size_hint()` should not lead to memory safety","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8081,"byte_end":8149,"line_start":89,"line_end":89,"column_start":5,"column_end":73}},{"value":"/ violations.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8154,"byte_end":8169,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8174,"byte_end":8177,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ That said, the implementation should provide a correct estimation,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8182,"byte_end":8252,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/ because otherwise it would be a violation of the trait's protocol.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8257,"byte_end":8327,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8332,"byte_end":8335,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The default implementation returns `(0, `[`None`]`)` which is correct for any","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8340,"byte_end":8421,"line_start":95,"line_end":95,"column_start":5,"column_end":86}},{"value":"/ stream.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8426,"byte_end":8437,"line_start":96,"line_end":96,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8442,"byte_end":8451,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9735,"byte_end":9746,"line_start":145,"line_end":145,"column_start":11,"column_end":22},"name":"FusedStream","qualname":"::stream::FusedStream","value":"FusedStream: Stream","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":" A stream which tracks whether or not the underlying stream\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A stream which tracks whether or not the underlying stream","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9258,"byte_end":9320,"line_start":137,"line_end":137,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9321,"byte_end":9352,"line_start":138,"line_end":138,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9353,"byte_end":9356,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9357,"byte_end":9435,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll_next` (or `try_poll_next`) returned","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9436,"byte_end":9514,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ `Poll::Ready(None)`. However, `is_terminated` may also return `true` if a","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9515,"byte_end":9592,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ stream has become inactive and can no longer make progress and should be","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9593,"byte_end":9669,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/ ignored or dropped rather than being polled again.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9670,"byte_end":9724,"line_start":144,"line_end":144,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9829,"byte_end":9842,"line_start":147,"line_end":147,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::stream::FusedStream::is_terminated","value":"pub fn is_terminated(&Self) -> bool","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Returns `true` if the stream should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the stream should no longer be polled.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9761,"byte_end":9821,"line_start":146,"line_end":146,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10284,"byte_end":10290,"line_start":169,"line_end":169,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::stream::private_try_stream::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10512,"byte_end":10521,"line_start":176,"line_end":176,"column_start":11,"column_end":20},"name":"TryStream","qualname":"::stream::TryStream","value":"TryStream: Stream + private_try_stream::Sealed","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":" A convenience for streams that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for streams that return `Result` values that includes","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10378,"byte_end":10449,"line_start":174,"line_end":174,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10450,"byte_end":10501,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10631,"byte_end":10633,"line_start":178,"line_end":178,"column_start":10,"column_end":12},"name":"Ok","qualname":"::stream::TryStream::Ok","value":"type Ok;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10565,"byte_end":10621,"line_start":177,"line_end":177,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10697,"byte_end":10702,"line_start":181,"line_end":181,"column_start":10,"column_end":15},"name":"Error","qualname":"::stream::TryStream::Error","value":"type Error;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10640,"byte_end":10687,"line_start":180,"line_end":180,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10952,"byte_end":10965,"line_start":188,"line_end":188,"column_start":8,"column_end":21},"name":"try_poll_next","qualname":"::stream::TryStream::try_poll_next","value":"pub fn try_poll_next(Pin<&mut Self>, &mut Context)\n-> Poll<Option<Result<Self::Ok, Self::Error>>>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Poll this `TryStream` as if it were a `Stream`.","sig":null,"attributes":[{"value":"/ Poll this `TryStream` as if it were a `Stream`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10709,"byte_end":10760,"line_start":183,"line_end":183,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10765,"byte_end":10768,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10773,"byte_end":10849,"line_start":185,"line_end":185,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Stream` trait; in the future it won't be","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10854,"byte_end":10928,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10933,"byte_end":10944,"line_start":187,"line_end":187,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"decl_id":null,"docs":" Task notification.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":988,"byte_end":1000,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/ Task notification.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12446,"byte_end":12468,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"__internal","qualname":"::task::__internal","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\mod.rs","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":162}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":16077,"byte_end":16088,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"AtomicWaker","qualname":"::task::__internal::atomic_waker::AtomicWaker","value":"AtomicWaker {  }","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":" A synchronization primitive for task wakeup.","sig":null,"attributes":[{"value":"/ A synchronization primitive for task wakeup.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13342,"byte_end":13390,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13391,"byte_end":13394,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Sometimes the task interested in a given event will change over time.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13395,"byte_end":13468,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ An `AtomicWaker` can coordinate concurrent notifications with the consumer","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13469,"byte_end":13547,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ potentially \"updating\" the underlying task to wake up. This is useful in","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13548,"byte_end":13624,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ scenarios where a computation completes in another thread and wants to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13625,"byte_end":13699,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ notify the consumer, but the consumer is in the process of being migrated to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13700,"byte_end":13780,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ a new logical task.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13781,"byte_end":13804,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13805,"byte_end":13808,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Consumers should call `register` before checking the result of a computation","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13809,"byte_end":13889,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ and producers should call `wake` after producing the computation (this","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13890,"byte_end":13964,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ differs from the usual `thread::park` pattern). It is also permitted for","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":13965,"byte_end":14041,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ `wake` to be called **before** `register`. This results in a no-op.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14042,"byte_end":14113,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14114,"byte_end":14117,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A single `AtomicWaker` may be reused for any number of calls to `register` or","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14118,"byte_end":14199,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ `wake`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14200,"byte_end":14211,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14212,"byte_end":14215,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Memory ordering","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14216,"byte_end":14237,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14238,"byte_end":14241,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Calling `register` \"acquires\" all memory \"released\" by calls to `wake`","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14242,"byte_end":14316,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ before the call to `register`.  Later calls to `wake` will wake the","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14317,"byte_end":14388,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/ registered waker (on contention this wake might be triggered in `register`).","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14389,"byte_end":14469,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14470,"byte_end":14473,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For concurrent calls to `register` (should be avoided) the ordering is only","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14474,"byte_end":14553,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ guaranteed for the winning call.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14554,"byte_end":14590,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14591,"byte_end":14594,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14595,"byte_end":14609,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14610,"byte_end":14613,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Here is a simple example providing a `Flag` that can be signalled manually","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14614,"byte_end":14692,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ when it is ready.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14693,"byte_end":14714,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14715,"byte_end":14718,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14719,"byte_end":14726,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use futures::future::Future;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14727,"byte_end":14759,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14760,"byte_end":14812,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ use std::sync::Arc;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14813,"byte_end":14836,"line_start":41,"line_end":41,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14837,"byte_end":14875,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14876,"byte_end":14921,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/ use std::pin::Pin;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14922,"byte_end":14944,"line_start":44,"line_end":44,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14945,"byte_end":14948,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ struct Inner {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14949,"byte_end":14967,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14968,"byte_end":14995,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/     set: AtomicBool,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":14996,"byte_end":15020,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15021,"byte_end":15026,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15027,"byte_end":15030,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone)]","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15031,"byte_end":15051,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/ struct Flag(Arc<Inner>);","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15052,"byte_end":15080,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15081,"byte_end":15084,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ impl Flag {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15085,"byte_end":15100,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/     pub fn new() -> Self {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15101,"byte_end":15131,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/         Self(Arc::new(Inner {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15132,"byte_end":15165,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/             waker: AtomicWaker::new(),","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15166,"byte_end":15208,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/             set: AtomicBool::new(false),","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15209,"byte_end":15253,"line_start":58,"line_end":58,"column_start":1,"column_end":45}},{"value":"/         }))","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15254,"byte_end":15269,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15270,"byte_end":15279,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15280,"byte_end":15283,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     pub fn signal(&self) {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15284,"byte_end":15314,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/         self.0.set.store(true, Relaxed);","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15315,"byte_end":15359,"line_start":63,"line_end":63,"column_start":1,"column_end":45}},{"value":"/         self.0.waker.wake();","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15360,"byte_end":15392,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15393,"byte_end":15402,"line_start":65,"line_end":65,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15403,"byte_end":15408,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15409,"byte_end":15412,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ impl Future for Flag {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15413,"byte_end":15439,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/     type Output = ();","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15440,"byte_end":15465,"line_start":69,"line_end":69,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15466,"byte_end":15469,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15470,"byte_end":15543,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/         // quick check to avoid registration if already done.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15544,"byte_end":15609,"line_start":72,"line_end":72,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15610,"byte_end":15651,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"/             return Poll::Ready(());","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15652,"byte_end":15691,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15692,"byte_end":15705,"line_start":75,"line_end":75,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15706,"byte_end":15709,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/         self.0.waker.register(cx.waker());","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15710,"byte_end":15756,"line_start":77,"line_end":77,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15757,"byte_end":15760,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/         // Need to check condition **after** `register` to avoid a race","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15761,"byte_end":15836,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/         // condition that would result in lost notifications.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15837,"byte_end":15902,"line_start":80,"line_end":80,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15903,"byte_end":15944,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/             Poll::Ready(())","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15945,"byte_end":15976,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15977,"byte_end":15997,"line_start":83,"line_end":83,"column_start":1,"column_end":21}},{"value":"/             Poll::Pending","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":15998,"byte_end":16027,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":16028,"byte_end":16041,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":16042,"byte_end":16051,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":16052,"byte_end":16057,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":16058,"byte_end":16065,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21153,"byte_end":21156,"line_start":200,"line_end":200,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicWaker>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `AtomicWaker`.\n","sig":null,"attributes":[{"value":"/ Create an `AtomicWaker`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21107,"byte_end":21135,"line_start":199,"line_end":199,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23442,"byte_end":23450,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"register","qualname":"<AtomicWaker>::register","value":"pub fn register(&Self, &Waker)","parent":null,"children":[],"decl_id":null,"docs":" Registers the waker to be notified on calls to `wake`.","sig":null,"attributes":[{"value":"/ Registers the waker to be notified on calls to `wake`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21404,"byte_end":21462,"line_start":211,"line_end":211,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21467,"byte_end":21470,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The new task will take place of any previous tasks that were registered","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21475,"byte_end":21550,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/ by previous calls to `register`. Any calls to `wake` that happen after","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21555,"byte_end":21629,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ a call to `register` (as defined by the memory ordering rules), will","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21634,"byte_end":21706,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ notify the `register` caller's task and deregister the waker from future","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21711,"byte_end":21787,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ notifications. Because of this, callers should ensure `register` gets","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21792,"byte_end":21865,"line_start":217,"line_end":217,"column_start":5,"column_end":78}},{"value":"/ invoked with a new `Waker` **each** time they require a wakeup.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21870,"byte_end":21937,"line_start":218,"line_end":218,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21942,"byte_end":21945,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ It is safe to call `register` with multiple other threads concurrently","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21950,"byte_end":22024,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ calling `wake`. This will result in the `register` caller's current","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22029,"byte_end":22100,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ task being notified once.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22105,"byte_end":22134,"line_start":222,"line_end":222,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22139,"byte_end":22142,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This function is safe to call concurrently, but this is generally a bad","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22147,"byte_end":22222,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ idea. Concurrent calls to `register` will attempt to register different","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22227,"byte_end":22302,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ tasks to be notified. One of the callers will win and have its task set,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22307,"byte_end":22383,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ but there is no guarantee as to which caller will succeed.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22388,"byte_end":22450,"line_start":227,"line_end":227,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22455,"byte_end":22458,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22463,"byte_end":22477,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22482,"byte_end":22485,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Here is how `register` is used when implementing a flag.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22490,"byte_end":22550,"line_start":231,"line_end":231,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22555,"byte_end":22558,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22563,"byte_end":22570,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use futures::future::Future;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22575,"byte_end":22607,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22612,"byte_end":22664,"line_start":235,"line_end":235,"column_start":5,"column_end":57}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22669,"byte_end":22707,"line_start":236,"line_end":236,"column_start":5,"column_end":43}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22712,"byte_end":22757,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/ use std::pin::Pin;","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22762,"byte_end":22784,"line_start":238,"line_end":238,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22789,"byte_end":22792,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ struct Flag {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22797,"byte_end":22814,"line_start":240,"line_end":240,"column_start":5,"column_end":22}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22819,"byte_end":22846,"line_start":241,"line_end":241,"column_start":5,"column_end":32}},{"value":"/     set: AtomicBool,","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22851,"byte_end":22875,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22880,"byte_end":22885,"line_start":243,"line_end":243,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22890,"byte_end":22893,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ impl Future for Flag {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22898,"byte_end":22924,"line_start":245,"line_end":245,"column_start":5,"column_end":31}},{"value":"/     type Output = ();","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22929,"byte_end":22954,"line_start":246,"line_end":246,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22959,"byte_end":22962,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":22967,"byte_end":23040,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/         // Register **before** checking `set` to avoid a race condition","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23045,"byte_end":23120,"line_start":249,"line_end":249,"column_start":5,"column_end":80}},{"value":"/         // that would result in lost notifications.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23125,"byte_end":23180,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/         self.waker.register(cx.waker());","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23185,"byte_end":23229,"line_start":251,"line_end":251,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23234,"byte_end":23237,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/         if self.set.load(Relaxed) {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23242,"byte_end":23281,"line_start":253,"line_end":253,"column_start":5,"column_end":44}},{"value":"/             Poll::Ready(())","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23286,"byte_end":23317,"line_start":254,"line_end":254,"column_start":5,"column_end":36}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23322,"byte_end":23342,"line_start":255,"line_end":255,"column_start":5,"column_end":25}},{"value":"/             Poll::Pending","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23347,"byte_end":23376,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/         }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23381,"byte_end":23394,"line_start":257,"line_end":257,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23399,"byte_end":23408,"line_start":258,"line_end":258,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23413,"byte_end":23418,"line_start":259,"line_end":259,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":23423,"byte_end":23430,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28196,"byte_end":28200,"line_start":357,"line_end":357,"column_start":12,"column_end":16},"name":"wake","qualname":"<AtomicWaker>::wake","value":"pub fn wake(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Calls `wake` on the last `Waker` passed to `register`.","sig":null,"attributes":[{"value":"/ Calls `wake` on the last `Waker` passed to `register`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28047,"byte_end":28105,"line_start":354,"line_end":354,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28110,"byte_end":28113,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If `register` has not been called yet, then this does nothing.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28118,"byte_end":28184,"line_start":356,"line_end":356,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28696,"byte_end":28700,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"take","qualname":"<AtomicWaker>::take","value":"pub fn take(&Self) -> Option<Waker>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last `Waker` passed to `register`, so that the user can wake it.","sig":null,"attributes":[{"value":"/ Returns the last `Waker` passed to `register`, so that the user can wake it.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28300,"byte_end":28380,"line_start":363,"line_end":363,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28385,"byte_end":28388,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28393,"byte_end":28396,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Sometimes, just waking the AtomicWaker is not fine grained enough. This allows the user","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28401,"byte_end":28492,"line_start":366,"line_end":366,"column_start":5,"column_end":96}},{"value":"/ to take the waker and then wake it separately, rather than performing both steps in one","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28497,"byte_end":28588,"line_start":367,"line_end":367,"column_start":5,"column_end":96}},{"value":"/ atomic action.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28593,"byte_end":28611,"line_start":368,"line_end":368,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28616,"byte_end":28619,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ If a waker has not been registered, this returns `None`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":28624,"byte_end":28684,"line_start":370,"line_end":370,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":1058,"byte_end":1067,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"name":"__private","qualname":"::__private","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":170}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2434,"byte_end":2437,"line_start":37,"line_end":37,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2711,"byte_end":2712,"line_start":52,"line_end":52,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3488,"byte_end":3489,"line_start":75,"line_end":75,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3856,"byte_end":3859,"line_start":92,"line_end":92,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":4060,"byte_end":4076,"line_start":99,"line_end":99,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8892,"byte_end":8895,"line_start":118,"line_end":118,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10047,"byte_end":10050,"line_start":156,"line_end":156,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10324,"byte_end":10325,"line_start":171,"line_end":171,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":11097,"byte_end":11098,"line_start":192,"line_end":192,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":11486,"byte_end":11489,"line_start":210,"line_end":210,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":11895,"byte_end":11911,"line_start":226,"line_end":226,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":12321,"byte_end":12324,"line_start":241,"line_end":241,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21089,"byte_end":21100,"line_start":198,"line_end":198,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21270,"byte_end":21275,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":29850,"byte_end":29861,"line_start":403,"line_end":403,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":29940,"byte_end":29951,"line_start":409,"line_end":409,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":30080,"byte_end":30091,"line_start":415,"line_end":415,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":30116,"byte_end":30127,"line_start":416,"line_end":416,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":820,"byte_end":826,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":908,"byte_end":914,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\lib.rs","byte_start":1009,"byte_end":1013,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\mod.rs","byte_start":12517,"byte_end":12527,"line_start":7,"line_end":7,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":132}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2124,"byte_end":2130,"line_start":26,"line_end":26,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":9666},"to":{"krate":0,"index":17}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2434,"byte_end":2437,"line_start":37,"line_end":37,"column_start":25,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":34794},"to":{"krate":0,"index":17}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2711,"byte_end":2712,"line_start":52,"line_end":52,"column_start":30,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2912,"byte_end":2918,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":9666},"to":{"krate":0,"index":32}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":2941,"byte_end":2947,"line_start":57,"line_end":57,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":32}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3488,"byte_end":3489,"line_start":75,"line_end":75,"column_start":29,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":37},"to":{"krate":0,"index":32}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":3856,"byte_end":3859,"line_start":92,"line_end":92,"column_start":59,"column_end":62},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":105},"to":{"krate":0,"index":17}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\future.rs","byte_start":4060,"byte_end":4076,"line_start":99,"line_end":99,"column_start":54,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":4011},"to":{"krate":0,"index":17}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":8892,"byte_end":8895,"line_start":118,"line_end":118,"column_start":20,"column_end":23},"kind":{"Impl":{"id":5}},"from":{"krate":2,"index":34794},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":9748,"byte_end":9754,"line_start":145,"line_end":145,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":68},"to":{"krate":0,"index":82}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10047,"byte_end":10050,"line_start":156,"line_end":156,"column_start":25,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":34794},"to":{"krate":0,"index":82}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10324,"byte_end":10325,"line_start":171,"line_end":171,"column_start":30,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":94},"to":{"krate":0,"index":92}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10523,"byte_end":10529,"line_start":176,"line_end":176,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":68},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":10552,"byte_end":10558,"line_start":176,"line_end":176,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":92},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":11097,"byte_end":11098,"line_start":192,"line_end":192,"column_start":29,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":102},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":11486,"byte_end":11489,"line_start":210,"line_end":210,"column_start":49,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":5,"index":105},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":11895,"byte_end":11911,"line_start":226,"line_end":226,"column_start":44,"column_end":60},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":4011},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\stream.rs","byte_start":12321,"byte_end":12324,"line_start":241,"line_end":241,"column_start":59,"column_end":62},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":105},"to":{"krate":0,"index":82}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21089,"byte_end":21100,"line_start":198,"line_end":198,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21234,"byte_end":21238,"line_start":202,"line_end":202,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2155},"to":{"krate":0,"index":150}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":21270,"byte_end":21275,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":2,"index":9851},"to":{"krate":0,"index":150}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":29850,"byte_end":29861,"line_start":403,"line_end":403,"column_start":18,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":2131}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":29940,"byte_end":29951,"line_start":409,"line_end":409,"column_start":21,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":7032}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":30080,"byte_end":30091,"line_start":415,"line_end":415,"column_start":22,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":2143}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-core-0.3.12\\src\\task\\__internal\\atomic_waker.rs","byte_start":30116,"byte_end":30127,"line_start":416,"line_end":416,"column_start":22,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":2155}}]}