{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12","program":"C:\\Users\\gabri\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","futures_sink","--edition=2018","C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=ed51c7ac5b57747d","-C","extra-filename=-ed51c7ac5b57747d","--out-dir","c:\\Users\\gabri\\Desktop\\gcoin\\client\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\gabri\\Desktop\\gcoin\\client\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\gabri\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\gabri\\Desktop\\gcoin\\client\\target\\rls\\debug\\deps\\libfutures_sink-ed51c7ac5b57747d.rmeta"},"prelude":{"crate_id":{"name":"futures_sink","disambiguator":[4842142731676998583,2203247429240510391]},"crate_root":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src","external_crates":[{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7607668859873757532,1781785219377684392]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[13611023294341355437,10043691270023661894]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[101447838822452173,8618322888261503379]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13475896778791491548,12248248351844131012]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4016777027723060150,6575819384461205726]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2651865965395105447,1277636433429132291]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6625204696738865430,3777009149181587391]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2466389407038385562,16922006968362962921]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7691805749014262489,8411562063720114408]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10977525908131958733,15669095950081001892]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[14600121526287085947,8078689161172856885]}},{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[15875267039736385556,9614836444850963760]}}],"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":0,"byte_end":9100,"line_start":1,"line_end":226,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":0,"byte_end":9100,"line_start":1,"line_end":226,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":16},{"krate":0,"index":24},{"krate":0,"index":32}],"decl_id":null,"docs":" Asynchronous sinks","sig":null,"attributes":[{"value":"/ Asynchronous sinks","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":23,"byte_end":26,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate contains the `Sink` trait which allows values to be sent","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":27,"byte_end":98,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ asynchronously.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":99,"byte_end":118,"line_start":4,"line_end":4,"column_start":1,"column_end":20}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":163,"byte_end":251,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":419,"byte_end":440,"line_start":10,"line_end":10,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1951,"byte_end":1955,"line_start":47,"line_end":47,"column_start":11,"column_end":15},"name":"Sink","qualname":"::Sink","value":"Sink<Item>","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15}],"decl_id":null,"docs":" A `Sink` is a value into which other values can be sent, asynchronously.","sig":null,"attributes":[{"value":"/ A `Sink` is a value into which other values can be sent, asynchronously.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":660,"byte_end":736,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":737,"byte_end":740,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Basic examples of sinks include the sending side of:","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":741,"byte_end":797,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":798,"byte_end":801,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ - Channels","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":802,"byte_end":816,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/ - Sockets","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":817,"byte_end":830,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/ - Pipes","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":831,"byte_end":842,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":843,"byte_end":846,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In addition to such \"primitive\" sinks, it's typical to layer additional","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":847,"byte_end":922,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ functionality, such as buffering, on top of an existing sink.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":923,"byte_end":988,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":989,"byte_end":992,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Sending to a sink is \"asynchronous\" in the sense that the value may not be","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":993,"byte_end":1071,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ sent in its entirety immediately. Instead, values are sent in a two-phase","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1072,"byte_end":1149,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ way: first by initiating a send, and then by polling for completion. This","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1150,"byte_end":1227,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ two-phase setup is analogous to buffered writing in synchronous code, where","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1228,"byte_end":1307,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ writes often succeed immediately, but internally are buffered and are","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1308,"byte_end":1381,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ *actually* written only upon flushing.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1382,"byte_end":1424,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1425,"byte_end":1428,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ In addition, the `Sink` may be *full*, in which case it is not even possible","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1429,"byte_end":1509,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ to start the sending process.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1510,"byte_end":1543,"line_start":39,"line_end":39,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1544,"byte_end":1547,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ As with `Future` and `Stream`, the `Sink` trait is built from a few core","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1548,"byte_end":1624,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ required methods, and a host of default methods for working in a","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1625,"byte_end":1693,"line_start":42,"line_end":42,"column_start":1,"column_end":69}},{"value":"/ higher-level way. The `Sink::send_all` combinator is of particular","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1694,"byte_end":1764,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/ importance: you can use it to send an entire stream to a sink, which is","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1765,"byte_end":1840,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ the simplest way to ultimately consume a stream.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1841,"byte_end":1893,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1894,"byte_end":1940,"line_start":46,"line_end":46,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2042,"byte_end":2047,"line_start":49,"line_end":49,"column_start":10,"column_end":15},"name":"Error","qualname":"::Sink::Error","value":"type Error;","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" The type of value produced by the sink when an error occurs.\n","sig":null,"attributes":[{"value":"/ The type of value produced by the sink when an error occurs.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":1968,"byte_end":2032,"line_start":48,"line_end":48,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2648,"byte_end":2658,"line_start":63,"line_end":63,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"::Sink::poll_ready","value":"pub fn poll_ready(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Attempts to prepare the `Sink` to receive a value.","sig":null,"attributes":[{"value":"/ Attempts to prepare the `Sink` to receive a value.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2054,"byte_end":2108,"line_start":51,"line_end":51,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2113,"byte_end":2116,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This method must be called and return `Poll::Ready(Ok(()))` prior to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2121,"byte_end":2193,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"/ each call to `start_send`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2198,"byte_end":2228,"line_start":54,"line_end":54,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2233,"byte_end":2236,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This method returns `Poll::Ready` once the underlying sink is ready to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2241,"byte_end":2315,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ receive data. If this method returns `Poll::Pending`, the current task","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2320,"byte_end":2394,"line_start":57,"line_end":57,"column_start":5,"column_end":79}},{"value":"/ is registered to be notified (via `cx.waker().wake_by_ref()`) when `poll_ready`","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2399,"byte_end":2482,"line_start":58,"line_end":58,"column_start":5,"column_end":88}},{"value":"/ should be called again.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2487,"byte_end":2514,"line_start":59,"line_end":59,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2519,"byte_end":2522,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2527,"byte_end":2592,"line_start":61,"line_end":61,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2597,"byte_end":2640,"line_start":62,"line_end":62,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3858,"byte_end":3868,"line_start":84,"line_end":84,"column_start":8,"column_end":18},"name":"start_send","qualname":"::Sink::start_send","value":"pub fn start_send(Pin<&mut Self>, Item) -> Result<(), Self::Error>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Begin the process of sending a value to the sink.\n Each call to this function must be preceded by a successful call to\n `poll_ready` which returned `Poll::Ready(Ok(()))`.","sig":null,"attributes":[{"value":"/ Begin the process of sending a value to the sink.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2742,"byte_end":2795,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ Each call to this function must be preceded by a successful call to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2800,"byte_end":2871,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/ `poll_ready` which returned `Poll::Ready(Ok(()))`.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2876,"byte_end":2930,"line_start":67,"line_end":67,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2935,"byte_end":2938,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ As the name suggests, this method only *begins* the process of sending","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":2943,"byte_end":3017,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ the item. If the sink employs buffering, the item isn't fully processed","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3022,"byte_end":3097,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ until the buffer is fully flushed. Since sinks are designed to work with","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3102,"byte_end":3178,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ asynchronous I/O, the process of actually writing out the data to an","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3183,"byte_end":3255,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ underlying object takes place asynchronously. **You *must* use","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3260,"byte_end":3326,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/ `poll_flush` or `poll_close` in order to guarantee completion of a","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3331,"byte_end":3401,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/ send**.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3406,"byte_end":3417,"line_start":75,"line_end":75,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3422,"byte_end":3425,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Implementations of `poll_ready` and `start_send` will usually involve","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3430,"byte_end":3503,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/ flushing behind the scenes in order to make room for new messages.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3508,"byte_end":3578,"line_start":78,"line_end":78,"column_start":5,"column_end":75}},{"value":"/ It is only necessary to call `poll_flush` if you need to guarantee that","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3583,"byte_end":3658,"line_start":79,"line_end":79,"column_start":5,"column_end":80}},{"value":"/ *all* of the items placed into the `Sink` have been sent.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3663,"byte_end":3724,"line_start":80,"line_end":80,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3729,"byte_end":3732,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3737,"byte_end":3802,"line_start":82,"line_end":82,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3807,"byte_end":3850,"line_start":83,"line_end":83,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4543,"byte_end":4553,"line_start":98,"line_end":98,"column_start":8,"column_end":18},"name":"poll_flush","qualname":"::Sink::poll_flush","value":"pub fn poll_flush(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Flush any remaining output from this sink.","sig":null,"attributes":[{"value":"/ Flush any remaining output from this sink.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3936,"byte_end":3982,"line_start":86,"line_end":86,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3987,"byte_end":3990,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Ready(Ok(()))` when no buffered items remain. If this","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":3995,"byte_end":4067,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ value is returned then it is guaranteed that all previous values sent","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4072,"byte_end":4145,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/ via `start_send` have been flushed.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4150,"byte_end":4189,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4194,"byte_end":4197,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Pending` if there is more work left to do, in which","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4202,"byte_end":4272,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/ case the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4277,"byte_end":4364,"line_start":93,"line_end":93,"column_start":5,"column_end":92}},{"value":"/ `poll_flush` should be called again.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4369,"byte_end":4409,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4414,"byte_end":4417,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ In most cases, if the sink encounters an error, the sink will","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4422,"byte_end":4487,"line_start":96,"line_end":96,"column_start":5,"column_end":70}},{"value":"/ permanently be unable to receive items.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4492,"byte_end":4535,"line_start":97,"line_end":97,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":5222,"byte_end":5232,"line_start":111,"line_end":111,"column_start":8,"column_end":18},"name":"poll_close","qualname":"::Sink::poll_close","value":"pub fn poll_close(Pin<&mut Self>, &mut Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Flush any remaining output and close this sink, if necessary.","sig":null,"attributes":[{"value":"/ Flush any remaining output and close this sink, if necessary.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4637,"byte_end":4702,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4707,"byte_end":4710,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Ready(Ok(()))` when no buffered items remain and the sink","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4715,"byte_end":4791,"line_start":102,"line_end":102,"column_start":5,"column_end":81}},{"value":"/ has been successfully closed.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4796,"byte_end":4829,"line_start":103,"line_end":103,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4834,"byte_end":4837,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Returns `Poll::Pending` if there is more work left to do, in which","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4842,"byte_end":4912,"line_start":105,"line_end":105,"column_start":5,"column_end":75}},{"value":"/ case the current task is scheduled (via `cx.waker().wake_by_ref()`) to wake up when","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":4917,"byte_end":5004,"line_start":106,"line_end":106,"column_start":5,"column_end":92}},{"value":"/ `poll_close` should be called again.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":5009,"byte_end":5049,"line_start":107,"line_end":107,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":5054,"byte_end":5057,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ If this function encounters an error, the sink should be considered to","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":5062,"byte_end":5136,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/ have failed permanently, and no more `Sink` methods should be called.","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":5141,"byte_end":5214,"line_start":110,"line_end":110,"column_start":5,"column_end":78}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":6038,"byte_end":6041,"line_start":134,"line_end":134,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":6889,"byte_end":6892,"line_start":163,"line_end":163,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":7627,"byte_end":7635,"line_start":185,"line_end":185,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":8407,"byte_end":8410,"line_start":207,"line_end":207,"column_start":77,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":6038,"byte_end":6041,"line_start":134,"line_end":134,"column_start":30,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":34794},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":6889,"byte_end":6892,"line_start":163,"line_end":163,"column_start":37,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":5370},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":7627,"byte_end":7635,"line_start":185,"line_end":185,"column_start":45,"column_end":53},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":3217},"to":{"krate":0,"index":9}},{"span":{"file_name":"C:\\Users\\gabri\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\futures-sink-0.3.12\\src\\lib.rs","byte_start":8407,"byte_end":8410,"line_start":207,"line_end":207,"column_start":77,"column_end":80},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":105},"to":{"krate":0,"index":9}}]}